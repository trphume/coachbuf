//go:build ignore
// +build ignore

// This program generates tables.go

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
)

var header = []byte(`// Code generated by go run make_tables.go. DO NOT EDIT.

package bitmath

`)

var log2tab = make([]uint8, 256)

func main() {
	buf := bytes.NewBuffer(header)

	gen(buf, "log2tab", log2)

	out, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	err = os.WriteFile("tables.go", out, 0666)
	if err != nil {
		log.Fatal(err)
	}
}

func gen(w io.Writer, name string, f func(uint8) uint8) {
	// Use a const string to allow the compiler to constant-evaluate lookups at constant index.
	fmt.Fprintf(w, "const %s = \"\"+\n\"", name)
	for i := 0; i < 256; i++ {
		fmt.Fprintf(w, "\\x%02x", f(uint8(i)))
		if i%16 == 15 && i != 255 {
			fmt.Fprint(w, "\"+\n\"")
		}
	}
	fmt.Fprint(w, "\"\n\n")
}

func log2(x uint8) uint8 {
	if x == 0 || x == 1 {
		log2tab[x] = 0
		return 0
	}

	log2tab[x] = 1 + log2tab[x/2]
	return log2tab[x]
}
